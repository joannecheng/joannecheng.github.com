:markdown
  # Visualizing Health Data, Part 1

  Earlier this year, visualizing.org announced a [contest to promote transparency in the medical field](http://visualizing.org/datasets/medicare-provider-charge-data-inpatient). 
  The contest is over, but the data remains on the contest website. It's a fascinating dataset with over 160,000 rows with information on total charges and medicare coverage, by treatment, for thousands of hospital in the US.

  The Centers for Medicare and Medicaid services opened up the data in hopes of finding patterns and inconsistencies in the world of medical billing. They state on their website:

  "The differences between hospital charges and Medicare payments are striking, as is the enormous variation in hospital charges across and within communities."

  I want to visualize this data to see if this is true, and I want to use R to see this data. I want to see the differences between the uncovered hospital charges ((average total cost - average covered charges) * total) in each state and the differences in cost for the same treatment.
  I'm going to create a collection of [box plots](http://en.wikipedia.org/wiki/Box_plot) in R for each state, for every treatment in the data file. Box plots clearly display the range, median, min, max, and outliers - the taller the box, the bigger the variance of cost.

  First I need to download the [inpatient data csv file](http://visualizing.org/datasets/medicare-provider-charge-data-inpatient) from the contest website.
  I use R to read the CSV file by passing the csv file path to ```read.csv```. The ```read.csv``` command takes a file path and several optional parameters. By default, ```read.csv``` assumes that the first row in your csv file has a header and is comma seperated, so we don't need to pass in any other options.

= CodeRay.scan("inpatient <- read.csv('/path/to/Medicare_Provider_Charge_Inpatient_DRG100_FY2011.csv')", :ruby).div

:markdown
  We can saved the ```read.csv``` to a variable called 'inpatient.' ```read.csv``` returns a DataFrame, a structure used to store table data. We can view our table data by calling ```View(inpatient)```. 
  Elements of DataFrames can be accessed directly by index, like an array, or by column names and search conditions. For instance, we can get all unique treatments ('DRG.Definition') like so:

= CodeRay.scan("drgDefinitions <- unique(inpatient$DRG.Definition)", :c).div

:markdown
  Now that we have a list of all the unique treatments, we can loop through the list of treatments, gather rows with that DRG.Definition, then call [boxplot](http://stat.ethz.ch/R-manual/R-devel/library/graphics/html/boxplot.html) to create a box plot for treatment.

:ruby
  code = "
  for(i in 1:length(drgDefinitions)) {
    treatment <- toString(drgDefinitions[i])
    matchingTreatmentRows <- inpatient[inpatient['DRG.Definition']==treatment,]
    boxplot((Average.Covered.Charges - Average.Total.Payments)*Total.Discharges~Provider.State,
        data=matchingTreatmentRows, las=2, xlab='State', ylab='Total Payment',
        main=treatment)
  }"

= CodeRay.scan(code, :ruby).div

Example result:
= image_tag 'blog/septicemia.png'
-#
  :markdown
    A few explanations about the R code above:

    ```matchingTreatmentRows <- inpatient[inpatient['DRG.Definition']==treatment,]```

    * This line filters the inpatient DataFrame by returning the lines that have a DRG.Definition that matches the ```treatment``` string.

  :ruby
    code = "boxplot((Average.Covered.Charges - Average.Total.Payments)*Total.Discharges~Provider.State,
          data=matchingTreatmentRows, las=2, xlab='State', ylab='Average Total Payment',
          main=treatment)"
  = CodeRay.scan(code, :ruby).div

  :markdown
    * Let's break up the input to the ```boxplot`` call.
      ** ```(Average.Covered.Charges - Average.Total.Payments)*Total.Discharges~Provider.State``` The first argument is the x and y column names for our box plot.
    The x is the average covered charges subtracted by the average total payments, multiplied by the total number of discharges in each row, which would give us the total amount unpaid by Medicare. The y value is the state.
      ** ```data=matchingTreatmentRows``` This sets the data that will give us our graph.
      ** ```xlab='State'``` Label for the x axis
      ** ```ylab='Average Total Payment'``` Label for the y axis
      ** ```main=treatment``` sets title for the graph to the treatment name

:markdown
  I noticed a few things while browsing through the plots. The amount unpaid really did vary drastically within the same state, especially in California.
  There are a lot of unpaid medical costs, up to the millions in some hospitals!

  I want a way to easily explore these box plots so I could look at the differences between unpaid costs of different treatments. I could throw together a website, recreating these box plots with an existing javascript library. But, there's a problem:

= image_tag 'blog/health_care_screenshot2.png'

%p The source file is 25M, way too much for a user to load at once. We're going to need a database to store and query this data. The next step is to import this data into a database and build a web application on top of it.
